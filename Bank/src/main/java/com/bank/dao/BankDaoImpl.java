package com.bank.dao;

import com.bank.model.BankModel;
import com.bank.utils.MysqlConnection;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.*;

import org.apache.log4j.Logger;

public class BankDaoImpl implements BankDao {
    // It is able to access the logger from all classes in Banking Application
    static final Logger log = Logger.getLogger(BankDaoImpl.class);
    // Create an object for connection
    MysqlConnection c = new MysqlConnection();
    // It is used to access data from database
    private static final String SQL_INSERT_INTO_BANK = "insert into banktable(name,branch,address,phno,email) values(?,?,?,?,?)";
    private static final String SQL_DELETE_BY_PHNO = "delete from banktable where phno = ?";
    private static final String SQL_RETRIVE = "SELECT * FROM banktable where branch = ?";

    /**
     *
     * @param obj
     * @return
     */
    // createbankDAO method
    public int createbankDAO(BankModel obj) {

        Connection conn = null;
        // Initialize 0 to insertStatus
        int insertStatus = 0;
        try {
            // Getting the connection from MysqlConnection class
            conn = c.getConnect();
            conn.setAutoCommit(false);
        } catch (Exception e) {
            // This method helps to trace the exception.
            e.printStackTrace();
        }

        PreparedStatement ps = null;
        try {
            ps = conn.prepareStatement(SQL_INSERT_INTO_BANK);
            // Setting parameters
            ps.setString(1, obj.getName());
            ps.setString(2, obj.getBranch());
            ps.setString(3, obj.getAddress());
            ps.setInt(4, obj.getPhno());
            ps.setString(5, obj.getEmail());
            // The ps.executeUpdate method works to update database tables with values.
            insertStatus = ps.executeUpdate();
            if (insertStatus > 0) {
                log.info("success");
            } else {
                log.info("false");
            }
            // This method sends a commit statement to the MySQL server, committing the current transaction.
            conn.commit();
        } catch (Exception e1) {
            // This method helps to trace the exception.
            e1.printStackTrace();
            log.info("err" + e1);
            try {
                //  When called con.rollback() all transaction that you have done after that savepoint is undone.
                conn.rollback();
            } catch (SQLException e2) {
                // This method helps to trace the exception.
                e2.printStackTrace();
            }
        }
        // It returns the value of insertStatus
        return insertStatus;

    }

    /**
     *
     * @param phno
     * @return
     */
    // deletebankDAO method and phone number is sent to it

    public int deletebankDAO(Integer phno) {

        Connection conn = null;
        // Initialize 0 to deleteStatus
        int deleteStatus = 0;
        try {
            conn = c.getConnect();
        } catch (Exception e) {
            // This method helps to trace the exception.
            e.printStackTrace();
        }
        log.info(conn);

        PreparedStatement ps = null;
        try {
            // Use connection to delete into database table
            ps = conn.prepareStatement(SQL_DELETE_BY_PHNO);
            ps.setInt(1, phno);
            // The ps.executeUpdate method works to update database tables with values after deletion is done
            deleteStatus = ps.executeUpdate();

        } catch (SQLException e) {
            // This method helps to trace the exception.
            e.printStackTrace();
        }
        // It returns the value of deleteStatus
        return deleteStatus;
    }

    /**
     *
     * @param branch
     * @return
     */
    // retrievebankDAO method and bankname is sent to it to retrieve the data

    public List<BankModel> retrivebankDAO(String branch) {
        List<BankModel> blist = new ArrayList<BankModel>();
        // Create an object for connection
        Connection conn = null;
        // Initialize ps to null
        PreparedStatement ps = null;
        // Initialize rs to null
        ResultSet rs = null;
        MysqlConnection m = new MysqlConnection();
        try {
            conn = m.getConnect();
            // Use connection to retrieve into database table
            ps = conn.prepareStatement(SQL_RETRIVE);
            ps.setString(1, branch);
            // Executes the SQL query in this PreparedStatement object and returns the ResultSet object generated by the query.
            rs = ps.executeQuery();
            while (rs.next()) {
                log.info("inside while");
                // Create object for model
                BankModel bm = new BankModel();
                // Retrieving result from resultset
                bm.setName(rs.getString(1));
                bm.setBranch(rs.getString(2));
                bm.setAddress(rs.getString(3));
                bm.setPhno(Integer.valueOf(rs.getString(4)));
                bm.setEmail(rs.getString(5));
                // The result is added to list
                blist.add(bm);
            }
            log.info("list  " + blist);

        } catch (SQLException e) {
            // This method helps to trace the exception.
            e.printStackTrace();
        }
        // Returns the list
        return blist;
    }

    public static void main(String[] args) throws SQLException {
        // Create an object for dao
        BankDao bd = new BankDaoImpl();
        List<BankModel> b = bd.retrivebankDAO("li");
        for (BankModel bm : b) {
            log.info(bm);
        }

    }

}
